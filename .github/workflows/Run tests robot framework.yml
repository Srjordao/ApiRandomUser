name: Testes Regressivos API Random User
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 * * * *"

jobs:
  run_robot_tests:
    name: Testes Regressivos API Random User
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install --upgrade setuptools
          pip install allure-robotframework
          pip install robotframework-faker robotframework-jsonlibrary robotframework-jsonschemalibrary robotframework-jsonvalidator robotframework-metrics robotframework-requests robotframework-xvfb robotframework-pythonlibcore pyYAML

      - name: Run Robot Framework tests
        run: |
          robot -d output/allure --listener allure_robotframework "RandomUser/tests"
        continue-on-error: true

      - name: Criar Issue se Testes Falharem
        if: always()  # Executa sempre, independentemente do sucesso ou falha
        uses: actions/github-script@v3
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            try {
              // Lendo o arquivo output.xml
              const xmlFilePath = path.join(process.env.GITHUB_WORKSPACE, 'output', 'output.xml');
              const xmlContent = fs.existsSync(xmlFilePath) ? fs.readFileSync(xmlFilePath, 'utf8') : null;

              // Verifica se o arquivo output.xml foi encontrado e tem conte√∫do
              if (!xmlContent || xmlContent.trim() === '') {
                console.log('‚ö†Ô∏è Arquivo output.xml n√£o encontrado ou est√° vazio. N√£o ser√° criada uma issue.');
                return;
              }

              // Procurando por mensagens de falha no XML
              const failRegex = /<status status="FAIL".*?>\s*(.*?)\s*<\/status>/gi;
              let match;
              let failText = '';

              while ((match = failRegex.exec(xmlContent)) !== null) {
                failText += `üí• ${match[1].trim()}\n\n`;
              }

              // Se n√£o houver falhas, n√£o cria a issue
              if (!failText) {
                console.log('üéâ Todos os testes passaram. N√£o ser√° criada uma issue.');
                return;
              }

              // Configura√ß√£o dos detalhes da issue
              const issueTitle = `‚ö†Ô∏è Testes falharam em ${context.workflow} - ${new Date().toISOString()}`;

              // Limite de caracteres para o corpo da issue
              const characterLimit = 15000;

              // Criar corpo da issue com os detalhes dos erros
              const issueBody = `
                ## üõë Detalhes do Erro

                **‚ö†Ô∏è Logs contendo "FAIL":**
                \`\`\`
                ${failText.slice(0, characterLimit)}
                \`\`\`

                üöÄ **A√ß√£o Recomendada:** Verifique os logs acima para identificar e corrigir os erros.
              `;

              // Criar a issue no reposit√≥rio
              await github.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['bug', 'automated test failure', '‚ö†Ô∏è urgent'],
              });
            } catch (error) {
              console.log('‚ùå Erro ao processar o arquivo XML ou criar a issue:', error.message);
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Allure Report as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: allure-report
          path: output/allure

      - name: Deploy report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./output/allure

  hourly_job:
    name: Hourly Job
    runs-on: ubuntu-latest
    steps:
      - name: Print Current Time
        run: echo "The current time is $(date)"