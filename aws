*** Settings ***
Library           AWSLibrary
Library           OperatingSystem
Library           aws_credentials.py

*** Variables ***
${ROLE_ARN}       arn:aws:iam::123456789012:role/MyRole
${SESSION_NAME}   MySessionName
${AWS_REGION}     us-east-1
${TABLE_NAME}     MyTable
${KEY_CONDITION}  id = :id
${KEY_VALUES}     {"id": {"S": "1234"}}  # Exemplo de valor para a chave

*** Test Cases ***
Consulta DynamoDB
    [Documentation]    Exemplo de consulta ao DynamoDB usando credenciais tempor√°rias obtidas programaticamente
    ${creds}=    Get Temporary Credentials    ${ROLE_ARN}    ${SESSION_NAME}
    Initialize AWS Session    ${creds['access_key']}    ${creds['secret_key']}    ${creds['session_token']}    ${AWS_REGION}
    ${response}=    DynamoDB Query    ${TABLE_NAME}    KeyConditionExpression=${KEY_CONDITION}    ExpressionAttributeValues=${KEY_VALUES}
    Log    ${response}

*** Keywords ***
Initialize AWS Session
    [Arguments]    ${access_key}    ${secret_key}    ${session_token}    ${region_name}
    Create Session    boto3_session    region_name=${region_name}    aws_access_key_id=${access_key}    aws_secret_access_key=${secret_key}    aws_session_token=${session_token}


import boto3

def get_temporary_credentials(role_arn, session_name):
    sts_client = boto3.client('sts')
    response = sts_client.assume_role(
        RoleArn=role_arn,
        RoleSessionName=session_name,
        DurationSeconds=3600  # 1 hora
    )
    
    credentials = response['Credentials']
    return {
        'access_key': credentials['AccessKeyId'],
        'secret_key': credentials['SecretAccessKey'],
        'session_token': credentials['SessionToken']
    }